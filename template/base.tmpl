// Code generated by cacheme, DO NOT EDIT.
{{"package store"}}
import(
cacheme "github.com/Yiling-J/cacheme-go"
{{range .Imports}}
    "{{.}}"
{{end}}
)

const (
	Hit  = "HIT"
	Miss = "MISS"
	Fetch     = "FETCH"
)

// Client is the cacheme client for all stores.
type Client struct {
{{range .Stores}}
    {{.Name}}CacheStore *{{.Name}}Cache
{{end}}
redis cacheme.RedisClient
cluster bool
logger  cacheme.Logger
}

// Redis return the current redis client.
func (c *Client) Redis() cacheme.RedisClient {
return c.redis
}

// SetLogger set logger interface for current client.
func (c *Client) SetLogger(l cacheme.Logger) {
c.logger = l
}

// NewPipeline returns a new cacheme pipeline.
func (c *Client) NewPipeline() *cacheme.CachePipeline {
return cacheme.NewPipeline(c.redis)
}

{{range .Stores}}
    var {{.Name}}CacheStore = &{{.Name}}Cache{tag: "{{.Name}}", singleflight: {{.Singleflight}}, metadata: {{.MetaData}}}
{{end}}

func init() {
{{ range $index, $store := .Stores}}
    {{if $store.VersionInfo.IsString}}
	{{.Name}}CacheStore.versionString = schema.Stores[{{$index}}].Version.(string)
    {{else if $store.VersionInfo.IsInt}}
	{{.Name}}CacheStore.versionString = strconv.Itoa(schema.Stores[{{$index}}].Version.(int))
    {{else}}
	{{.Name}}CacheStore.versionFunc = schema.Stores[{{$index}}].Version.(func() string)
    {{end}}
{{end}}
}

// New create a new cacheme client with given redis client.
func New(redis cacheme.RedisClient) *Client {
client := &Client{redis: redis}
{{range .Stores}}
    client.{{.Name}}CacheStore = {{.Name}}CacheStore.clone(client.redis)
    client.{{.Name}}CacheStore.setClient(client)
{{end}}
client.logger = &cacheme.NOPLogger{}
return client
}

// NewCluster create a new cacheme cluster client with given redis client.
func NewCluster(redis cacheme.RedisClient) *Client {
client := &Client{redis: redis, cluster: true}
{{range .Stores}}
    client.{{.Name}}CacheStore = {{.Name}}CacheStore.clone(client.redis)
    client.{{.Name}}CacheStore.setClient(client)
{{end}}
client.logger = &cacheme.NOPLogger{}
return client
}
